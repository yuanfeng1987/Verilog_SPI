// Copyright (C) 2019  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "08/27/2020 00:29:21"
                                                                                
// Verilog Test Bench template for design : SPI_Master
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ns/ 1 ns
module SPI_Master_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg i_clk;
reg [7:0] i_data_tx;
reg i_miso;
reg i_rst_n;
reg i_tx_Enable;
// wires                                               
wire [7:0]  o_data_rx;
wire o_mosi;
wire o_rx_ready;
wire o_spi_clk;
wire o_spi_cs;
wire [2:0] Counter_tx;
wire [2:0] Counter_rx;
wire Tx_busy;

// assign statements (if any)                          
SPI_Master i1 (
// port map - connection between master ports and signals/registers   
	.i_clk(i_clk),
	.i_data_tx(i_data_tx),
	.i_miso(i_miso),
	.i_rst_n(i_rst_n),
	.i_tx_Enable(i_tx_Enable),
	.o_data_rx(o_data_rx),
	.o_mosi(o_mosi),
	.o_rx_ready(o_rx_ready),
	.o_spi_clk(o_spi_clk),
	.o_spi_cs(o_spi_cs),
	.Counter_tx(Counter_tx),
	.Counter_rx(Counter_rx),
	.Tx_busy(Tx_busy)
);
initial                                                
begin                                                  
// code that executes only once                        
// insert code here --> begin                          
                                                       
// --> end                                             
$display("Running testbench");                       
end
initial
begin
	i_data_tx=8'b0101_0101;
	i_clk=1'b0;
	forever
		#50 i_clk=(!i_clk);
end
initial
begin

	i_miso=1'b0;
	forever
		#100 i_miso=~i_miso;
end
initial
begin

	i_rst_n=1'b0;
	#100 i_rst_n=1'b1;
	#2400 i_rst_n=1'b0;
	#100 i_rst_n=1'b1;
	#2400 i_rst_n=1'b0;
	#150 i_rst_n=1'b1;
	#2350 i_rst_n=1'b0;
	#150 i_rst_n=1'b1;
	#2350 i_rst_n=1'b0;
end
initial 
begin

	i_tx_Enable=1'b0;
	#200 i_tx_Enable=1'b1;
	#2300 i_tx_Enable=1'b0;
	#250 i_tx_Enable=1'b1;
	#2250 i_tx_Enable=1'b0;
	#150 i_tx_Enable=1'b1;
	#250 i_tx_Enable=1'b0;
	#150 i_tx_Enable=1'b1;
	#2050 i_tx_Enable=1'b0;
	#150 i_tx_Enable=1'b1;
	#2350 i_tx_Enable=1'b0;
end
                                              
always                                                 
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
begin                                                  
// code executes for every event on sensitivity list   
// insert code here --> begin                          
                                                       
@eachvec;                                              
// --> end                                             
end                                                    
endmodule

